# -*- coding: utf-8 -*-
"""
Created on Tue Nov 21 14:55:59 2017

@author: jalsh
"""
import matplotlib
matplotlib.use('TkAgg')
import random
import operator
import matplotlib.pyplot
import matplotlib.animation 
import csv
import agentframework
import tkinter
import requests
import bs4


num_of_agents = 10
num_of_iterations = 100
agents = []
neighbourhood = 20

fig = matplotlib.pyplot.figure(figsize=(7, 7))
ax = fig.add_axes([0, 0, 1, 1])

environment = []
f = open("in.txt", newline="")
r = csv.reader(f, csv.QUOTE_NONNUMERIC)
for row in r:
    rowlist = []
    for value in row:
        rowlist.append(float(value))
    environment.append(rowlist)

#ax.set_autoscale_on(False)

r = requests.get('http://www.geog.leeds.ac.uk/courses/computing/practicals/python/agent-framework/part9/data.html')
content = r.text
soup = bs4.BeautifulSoup(content, 'html.parser')
td_ys = soup.find_all(attrs={"class" : "y"})
td_xs = soup.find_all(attrs={"class" : "x"})
print(td_ys)
print(td_xs)

# Make the agents.
for i in range(num_of_agents):
    y = int(td_ys[i].text)
    x = int(td_xs[i].text)
    agents.append(agentframework.Agent(environment, agents, neighbourhood, x))
    
    carry_on = True

def update(frame_number):
    
    fig.clear() 
    global carry_on

    for i in range(num_of_agents):
       agents[i].move()
       agents[i].eat()
       agents[i].share_with_neighbours( neighbourhood)
    if random.random() < 0.0001:
        carry_on = False
        print("stopping condition")

    matplotlib.pyplot.imshow(environment)
    

    for i in range(num_of_agents):
        matplotlib.pyplot.scatter(agents[i].x,agents[i].y)
        #print(agents[i][0],agents[i][1])

    
    
        
def gen_function(b = [0]):
    a = 0
    global carry_on #Not actually needed as we're not assigning, but clearer
    while (a < 10) & (carry_on) :
        yield a			# Returns control and waits next call.
        a = a + 1                        


#animation = matplotlib.animation.FuncAnimation(fig, update, interval=1)
#animation = matplotlib.animation.FuncAnimation(fig, update, interval=1, repeat=False, frames=10)
        
def run():
       animation = matplotlib.animation.FuncAnimation(fig, update, frames=gen_function, repeat=False)
       canvas.show()
        
root = tkinter.Tk()
root.wm_title("Model")
canvas = matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(fig, master=root)
canvas._tkcanvas.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)  


menu_bar = tkinter.Menu(root)
root.config(menu=menu_bar)
model_menu = tkinter.Menu(menu_bar)
menu_bar.add_cascade(label="Model", menu=model_menu)
model_menu.add_command(label="Run model", command=run)

tkinter.mainloop() 

